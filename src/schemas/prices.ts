/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/status": {
    /** Status Endpoint */
    get: operations["status_endpoint_api_v1_status_get"];
  };
  "/api/v1/auth": {
    /**
     * Authentication
     * @description Authentication: provide username/password and get a bearer token in return.
     *
     * - **username**: Open Food Facts user_id (not email)
     * - **password**: user password (clear text, but HTTPS encrypted)
     *
     * A **token** is returned. If the **set_cookie** parameter is set to 1,
     * the token is also set as a cookie named "session" in the response.
     *
     * To authenticate, you can either:
     * - use the **Authorization** header with the **Bearer** scheme,
     *   e.g.: "Authorization: bearer token"
     * - use the **session** cookie, e.g.: "Cookie: session=token"
     */
    post: operations["authentication_api_v1_auth_post"];
  };
  "/api/v1/session": {
    /**
     * Get User Session
     * @description Return information about the current user session.
     */
    get: operations["get_user_session_api_v1_session_get"];
  };
  "/api/v1/users": {
    /** Get Users */
    get: operations["get_users_api_v1_users_get"];
  };
  "/api/v1/prices": {
    /** Get Price */
    get: operations["get_price_api_v1_prices_get"];
    /**
     * Create Price
     * @description Create a new price.
     *
     * This endpoint requires authentication.
     */
    post: operations["create_price_api_v1_prices_post"];
  };
  "/api/v1/proofs/upload": {
    /**
     * Upload Proof
     * @description Upload a proof file.
     *
     * The POST request must be a multipart/form-data request with a file field
     * named "file".
     *
     * This endpoint requires authentication.
     */
    post: operations["upload_proof_api_v1_proofs_upload_post"];
  };
  "/api/v1/proofs": {
    /**
     * Get User Proofs
     * @description Get all the proofs uploaded by the current user.
     *
     * This endpoint requires authentication.
     */
    get: operations["get_user_proofs_api_v1_proofs_get"];
  };
  "/api/v1/products": {
    /** Get Products */
    get: operations["get_products_api_v1_products_get"];
  };
  "/api/v1/products/code/{product_code}": {
    /** Get Product By Code */
    get: operations["get_product_by_code_api_v1_products_code__product_code__get"];
  };
  "/api/v1/products/{product_id}": {
    /** Get Product By Id */
    get: operations["get_product_by_id_api_v1_products__product_id__get"];
  };
  "/api/v1/locations": {
    /** Get Locations */
    get: operations["get_locations_api_v1_locations_get"];
  };
  "/api/v1/locations/osm/{location_osm_type}/{location_osm_id}": {
    /** Get Location By Osm */
    get: operations["get_location_by_osm_api_v1_locations_osm__location_osm_type___location_osm_id__get"];
  };
  "/api/v1/locations/{location_id}": {
    /** Get Location By Id */
    get: operations["get_location_by_id_api_v1_locations__location_id__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_authentication_api_v1_auth_post */
    Body_authentication_api_v1_auth_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** Body_upload_proof_api_v1_proofs_upload_post */
    Body_upload_proof_api_v1_proofs_upload_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
      /** @description The type of the proof */
      type: components["schemas"]["ProofTypeEnum"];
      /**
       * Is Public
       * @description if true, the proof is public and is included in the API response. Set false only for RECEIPT proofs that contain personal information.
       * @default true
       */
      is_public?: boolean;
    };
    /**
     * CurrencyEnum
     * @enum {string}
     */
    CurrencyEnum: "BND" | "UGX" | "HTG" | "ITL" | "SVC" | "VUV" | "XBA" | "COU" | "GRD" | "LTT" | "ZRZ" | "MZM" | "KPW" | "DZD" | "BBD" | "LUC" | "MOP" | "LKR" | "GBP" | "PHP" | "TTD" | "RHD" | "ATS" | "IEP" | "DJF" | "ILP" | "AED" | "ARL" | "INR" | "GEK" | "ZWD" | "CUP" | "RSD" | "XRE" | "BRR" | "NIC" | "USD" | "ZMW" | "MKD" | "BAD" | "XAG" | "BRC" | "BGO" | "NGN" | "UGS" | "IQD" | "TMT" | "VEF" | "ARA" | "ZMK" | "GQE" | "MDL" | "AOR" | "XAU" | "HKD" | "BTN" | "SDD" | "UAK" | "QAR" | "CLP" | "TRY" | "GEL" | "OMR" | "ROL" | "XPT" | "SAR" | "YER" | "UYI" | "ARP" | "BYR" | "JPY" | "COP" | "KZT" | "MAF" | "KGS" | "TZS" | "PGK" | "TOP" | "LUL" | "XBD" | "MMK" | "MNT" | "CAD" | "RON" | "ISK" | "XPF" | "CVE" | "MRU" | "BRL" | "MUR" | "PEI" | "BOP" | "THB" | "BEF" | "SYP" | "LTL" | "MRO" | "MDC" | "AZM" | "XEU" | "SSP" | "YDD" | "UYW" | "EGP" | "FKP" | "MZE" | "ERN" | "PYG" | "XXX" | "SEK" | "SUR" | "XOF" | "LYD" | "HRD" | "SRG" | "PKR" | "SHP" | "CNH" | "GNS" | "BEL" | "SLL" | "CLF" | "BMD" | "BRN" | "NZD" | "MXP" | "GTQ" | "TJS" | "ILR" | "MGA" | "PTE" | "PES" | "ETB" | "BRZ" | "LRD" | "CSK" | "AFA" | "KRH" | "LVL" | "CSD" | "ISJ" | "LAK" | "PLN" | "VEB" | "LVR" | "XFO" | "ZWR" | "XPD" | "TPE" | "DKK" | "ZRN" | "AMD" | "GHS" | "EUR" | "NOK" | "ZWL" | "VNN" | "AON" | "RUB" | "TRL" | "VND" | "MYR" | "UYP" | "ZAR" | "MGF" | "SZL" | "BAN" | "CHF" | "WST" | "XDR" | "BAM" | "CNY" | "MVR" | "BRE" | "DOP" | "MZN" | "FIM" | "BRB" | "PEN" | "SKK" | "USS" | "CZK" | "SOS" | "TND" | "BOB" | "ESB" | "GNF" | "MCF" | "MLF" | "FJD" | "AUD" | "AOA" | "ADP" | "MTL" | "AWG" | "ALK" | "IDR" | "JOD" | "GIP" | "JMD" | "CHW" | "CLE" | "BYB" | "BOV" | "FRF" | "LSL" | "KES" | "SGD" | "KYD" | "CRC" | "GWP" | "XTS" | "BOL" | "AOK" | "RWF" | "SLE" | "SIT" | "VES" | "ZAL" | "CNX" | "XSU" | "GWE" | "GYD" | "BDT" | "MXN" | "XCD" | "GHC" | "TWD" | "XBC" | "CHE" | "YUR" | "BSD" | "DEM" | "BWP" | "MAD" | "RUR" | "HRK" | "STN" | "BUK" | "MWK" | "NLG" | "PLZ" | "UYU" | "SBD" | "EEK" | "DDM" | "MKN" | "MVP" | "HUF" | "MXV" | "KRW" | "ILS" | "ARM" | "YUM" | "ANG" | "SRD" | "CUC" | "AFN" | "NIO" | "IRR" | "KHR" | "VED" | "ECV" | "SDG" | "TMM" | "MTP" | "NAD" | "TJR" | "XBB" | "STD" | "XFU" | "ALL" | "YUN" | "BYN" | "CDF" | "XAF" | "BGM" | "BHD" | "SDP" | "AZN" | "BEC" | "NPR" | "KMF" | "KWD" | "GMD" | "BGN" | "KRO" | "LBP" | "LUF" | "UZS" | "SCR" | "YUD" | "UAH" | "ESP" | "ECS" | "ESA" | "BGL" | "ARS" | "CYP" | "XUA" | "BIF" | "PAB" | "BZD" | "USN" | "HNL";
    /**
     * Flavor
     * @description Flavor is used to refer to a specific Open*Facts project:
     *
     * - Open Food Facts
     * - Open Beauty Facts
     * - Open Pet Food Facts
     * - Open Product Facts
     * - Open Food Facts (Pro plateform)
     * @enum {string}
     */
    Flavor: "off" | "obf" | "opff" | "opf" | "off-pro";
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** LocationFull */
    LocationFull: {
      /** Osm Id */
      osm_id: number;
      osm_type: components["schemas"]["LocationOSMEnum"];
      /** Id */
      id: number;
      /** Osm Name */
      osm_name: string | null;
      /** Osm Display Name */
      osm_display_name: string | null;
      /** Osm Address Postcode */
      osm_address_postcode: string | null;
      /** Osm Address City */
      osm_address_city: string | null;
      /** Osm Address Country */
      osm_address_country: string | null;
      /** Osm Lat */
      osm_lat: number | null;
      /** Osm Lon */
      osm_lon: number | null;
      /**
       * Price Count
       * @description number of prices for this location.
       * @default 0
       */
      price_count?: number;
      /**
       * Created
       * Format: date-time
       */
      created: string;
      /** Updated */
      updated: string | null;
    };
    /**
     * LocationOSMEnum
     * @enum {string}
     */
    LocationOSMEnum: "NODE" | "WAY" | "RELATION";
    /** Page[LocationFull] */
    Page_LocationFull_: {
      /** Items */
      items: components["schemas"]["LocationFull"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[PriceFullWithRelations] */
    Page_PriceFullWithRelations_: {
      /** Items */
      items: components["schemas"]["PriceFullWithRelations"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[ProductFull] */
    Page_ProductFull_: {
      /** Items */
      items: components["schemas"]["ProductFull"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[ProofFull] */
    Page_ProofFull_: {
      /** Items */
      items: components["schemas"]["ProofFull"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[UserBase] */
    Page_UserBase_: {
      /** Items */
      items: components["schemas"]["UserBase"][];
      /** Total */
      total: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /**
     * PriceCreateWithValidation
     * @description A version of `PriceCreate` with taxonomy validations.
     *
     * These validations are not done in the `PriceCreate` model because they
     * they are time-consuming and only necessary when creating a price from
     * the API.
     */
    PriceCreateWithValidation: {
      /**
       * Product Code
       * @description barcode (EAN) of the product, as a string.
       */
      product_code?: string | null;
      /**
       * Product Name
       * @description name of the product, as displayed on the receipt or the price tag.
       */
      product_name?: string | null;
      /**
       * Category Tag
       * @description ID of the Open Food Facts category of the product for
       *         products without barcode.
       *
       *         This is mostly for raw products such as vegetables or fruits. This
       *         field is exclusive with `product_code`: if this field is set, it means
       *         that the product does not have a barcode.
       *
       *         This ID must be a canonical category ID in the Open Food Facts taxonomy.
       *         If the ID is not valid, the price will be rejected.
       */
      category_tag?: string | null;
      /**
       * Labels Tags
       * @description labels of the product, only for products without barcode.
       *
       *         The labels must be valid labels in the Open Food Facts taxonomy.
       *         If one of the labels is not valid, the price will be rejected.
       *
       *         The most common labels are:
       *         - `en:organic`: the product is organic
       *         - `fr:ab-agriculture-biologique`: the product is organic, in France
       *         - `en:fair-trade`: the product is fair-trade
       *
       *         Other labels can be provided if relevant.
       */
      labels_tags?: string[] | null;
      /**
       * Origins Tags
       * @description origins of the product, only for products without barcode.
       *
       *         This field is a list as some products may be a mix of several origins,
       *         but most products have only one origin.
       *
       *         The origins must be valid origins in the Open Food Facts taxonomy.
       *         If one of the origins is not valid, the price will be rejected.
       */
      origins_tags?: string[] | null;
      /**
       * Price
       * @description price of the product, without its currency, taxes included.
       */
      price: number;
      /**
       * Price Is Discounted
       * @description true if the price is discounted.
       * @default false
       */
      price_is_discounted?: boolean;
      /**
       * Price Without Discount
       * @description price of the product without discount, without its currency, taxes included. If the product is not discounted, this field must be null.
       */
      price_without_discount?: number | null;
      /**
       * @description if the price is about a barcode-less product
       *         (if `category_tag` is provided), this field must be set to `KILOGRAM`
       *         or `UNIT` (KILOGRAM by default).
       *         This field is set to null and ignored if `product_code` is provided.
       *
       * @default KILOGRAM
       */
      price_per?: components["schemas"]["PricePerEnum"] | null;
      /** @description currency of the price, as a string. The currency must be a valid currency code. See https://en.wikipedia.org/wiki/ISO_4217 for a list of valid currency codes. */
      currency: components["schemas"]["CurrencyEnum"];
      /**
       * Location Osm Id
       * @description ID of the location in OpenStreetMap: the store where the product was bought.
       */
      location_osm_id: number;
      /** @description type of the OpenStreetMap location object. Stores can be represented as nodes, ways or relations in OpenStreetMap. It is necessary to be able to fetch the correct information about the store using the ID. */
      location_osm_type: components["schemas"]["LocationOSMEnum"];
      /**
       * Date
       * Format: date
       * @description date when the product was bought.
       */
      date: string;
      /**
       * Proof Id
       * @description ID of the proof, if any. The proof is a file (receipt or price tag image) uploaded by the user to prove the price of the product. The proof must be uploaded before the price, and the authenticated user must be the owner of the proof.
       */
      proof_id?: number | null;
    };
    /** PriceFull */
    PriceFull: {
      /**
       * Product Code
       * @description barcode (EAN) of the product, as a string.
       */
      product_code?: string | null;
      /**
       * Product Name
       * @description name of the product, as displayed on the receipt or the price tag.
       */
      product_name?: string | null;
      /**
       * Category Tag
       * @description ID of the Open Food Facts category of the product for
       *         products without barcode.
       *
       *         This is mostly for raw products such as vegetables or fruits. This
       *         field is exclusive with `product_code`: if this field is set, it means
       *         that the product does not have a barcode.
       *
       *         This ID must be a canonical category ID in the Open Food Facts taxonomy.
       *         If the ID is not valid, the price will be rejected.
       */
      category_tag?: string | null;
      /**
       * Labels Tags
       * @description labels of the product, only for products without barcode.
       *
       *         The labels must be valid labels in the Open Food Facts taxonomy.
       *         If one of the labels is not valid, the price will be rejected.
       *
       *         The most common labels are:
       *         - `en:organic`: the product is organic
       *         - `fr:ab-agriculture-biologique`: the product is organic, in France
       *         - `en:fair-trade`: the product is fair-trade
       *
       *         Other labels can be provided if relevant.
       */
      labels_tags?: string[] | null;
      /**
       * Origins Tags
       * @description origins of the product, only for products without barcode.
       *
       *         This field is a list as some products may be a mix of several origins,
       *         but most products have only one origin.
       *
       *         The origins must be valid origins in the Open Food Facts taxonomy.
       *         If one of the origins is not valid, the price will be rejected.
       */
      origins_tags?: string[] | null;
      /**
       * Price
       * @description price of the product, without its currency, taxes included.
       */
      price: number;
      /**
       * Price Is Discounted
       * @description true if the price is discounted.
       * @default false
       */
      price_is_discounted?: boolean;
      /**
       * Price Without Discount
       * @description price of the product without discount, without its currency, taxes included. If the product is not discounted, this field must be null.
       */
      price_without_discount?: number | null;
      /**
       * @description if the price is about a barcode-less product
       *         (if `category_tag` is provided), this field must be set to `KILOGRAM`
       *         or `UNIT` (KILOGRAM by default).
       *         This field is set to null and ignored if `product_code` is provided.
       *
       * @default KILOGRAM
       */
      price_per?: components["schemas"]["PricePerEnum"] | null;
      /** @description currency of the price, as a string. The currency must be a valid currency code. See https://en.wikipedia.org/wiki/ISO_4217 for a list of valid currency codes. */
      currency: components["schemas"]["CurrencyEnum"];
      /**
       * Location Osm Id
       * @description ID of the location in OpenStreetMap: the store where the product was bought.
       */
      location_osm_id: number;
      /** @description type of the OpenStreetMap location object. Stores can be represented as nodes, ways or relations in OpenStreetMap. It is necessary to be able to fetch the correct information about the store using the ID. */
      location_osm_type: components["schemas"]["LocationOSMEnum"];
      /**
       * Date
       * Format: date
       * @description date when the product was bought.
       */
      date: string;
      /**
       * Proof Id
       * @description ID of the proof, if any. The proof is a file (receipt or price tag image) uploaded by the user to prove the price of the product. The proof must be uploaded before the price, and the authenticated user must be the owner of the proof.
       */
      proof_id?: number | null;
      /** Product Id */
      product_id: number | null;
      /** Location Id */
      location_id: number | null;
      /** Owner */
      owner: string;
      /**
       * Created
       * Format: date-time
       */
      created: string;
    };
    /** PriceFullWithRelations */
    PriceFullWithRelations: {
      /**
       * Product Code
       * @description barcode (EAN) of the product, as a string.
       */
      product_code?: string | null;
      /**
       * Product Name
       * @description name of the product, as displayed on the receipt or the price tag.
       */
      product_name?: string | null;
      /**
       * Category Tag
       * @description ID of the Open Food Facts category of the product for
       *         products without barcode.
       *
       *         This is mostly for raw products such as vegetables or fruits. This
       *         field is exclusive with `product_code`: if this field is set, it means
       *         that the product does not have a barcode.
       *
       *         This ID must be a canonical category ID in the Open Food Facts taxonomy.
       *         If the ID is not valid, the price will be rejected.
       */
      category_tag?: string | null;
      /**
       * Labels Tags
       * @description labels of the product, only for products without barcode.
       *
       *         The labels must be valid labels in the Open Food Facts taxonomy.
       *         If one of the labels is not valid, the price will be rejected.
       *
       *         The most common labels are:
       *         - `en:organic`: the product is organic
       *         - `fr:ab-agriculture-biologique`: the product is organic, in France
       *         - `en:fair-trade`: the product is fair-trade
       *
       *         Other labels can be provided if relevant.
       */
      labels_tags?: string[] | null;
      /**
       * Origins Tags
       * @description origins of the product, only for products without barcode.
       *
       *         This field is a list as some products may be a mix of several origins,
       *         but most products have only one origin.
       *
       *         The origins must be valid origins in the Open Food Facts taxonomy.
       *         If one of the origins is not valid, the price will be rejected.
       */
      origins_tags?: string[] | null;
      /**
       * Price
       * @description price of the product, without its currency, taxes included.
       */
      price: number;
      /**
       * Price Is Discounted
       * @description true if the price is discounted.
       * @default false
       */
      price_is_discounted?: boolean;
      /**
       * Price Without Discount
       * @description price of the product without discount, without its currency, taxes included. If the product is not discounted, this field must be null.
       */
      price_without_discount?: number | null;
      /**
       * @description if the price is about a barcode-less product
       *         (if `category_tag` is provided), this field must be set to `KILOGRAM`
       *         or `UNIT` (KILOGRAM by default).
       *         This field is set to null and ignored if `product_code` is provided.
       *
       * @default KILOGRAM
       */
      price_per?: components["schemas"]["PricePerEnum"] | null;
      /** @description currency of the price, as a string. The currency must be a valid currency code. See https://en.wikipedia.org/wiki/ISO_4217 for a list of valid currency codes. */
      currency: components["schemas"]["CurrencyEnum"];
      /**
       * Location Osm Id
       * @description ID of the location in OpenStreetMap: the store where the product was bought.
       */
      location_osm_id: number;
      /** @description type of the OpenStreetMap location object. Stores can be represented as nodes, ways or relations in OpenStreetMap. It is necessary to be able to fetch the correct information about the store using the ID. */
      location_osm_type: components["schemas"]["LocationOSMEnum"];
      /**
       * Date
       * Format: date
       * @description date when the product was bought.
       */
      date: string;
      /**
       * Proof Id
       * @description ID of the proof, if any. The proof is a file (receipt or price tag image) uploaded by the user to prove the price of the product. The proof must be uploaded before the price, and the authenticated user must be the owner of the proof.
       */
      proof_id?: number | null;
      /** Product Id */
      product_id: number | null;
      /** Location Id */
      location_id: number | null;
      /** Owner */
      owner: string;
      /**
       * Created
       * Format: date-time
       */
      created: string;
      product: components["schemas"]["ProductFull"] | null;
      proof: components["schemas"]["ProofFull"] | null;
      location: components["schemas"]["LocationFull"] | null;
    };
    /**
     * PricePerEnum
     * @description For raw products (fruits, vegetables, etc.), the price is either
     * per unit or per kilogram. This enum is used to store this information.
     * @enum {string}
     */
    PricePerEnum: "UNIT" | "KILOGRAM";
    /** ProductFull */
    ProductFull: {
      /**
       * Code
       * @description barcode (EAN) of the product, as a string.
       */
      code: string;
      /** Id */
      id: number;
      /** @description source of data, either `off` (Open Food Facts), `obf` (Open Beauty Facts), `opff` (Open Pet Food Facts) or `obf` (Open Beauty Facts) */
      source: components["schemas"]["Flavor"] | null;
      /**
       * Product Name
       * @description name of the product.
       */
      product_name: string | null;
      /**
       * Product Quantity
       * @description quantity of the product, normalized in g or mL (depending on the product).
       */
      product_quantity: number | null;
      /**
       * Brands
       * @description brand(s) of the product.
       */
      brands: string | null;
      /**
       * Image Url
       * @description URL of the product image.
       */
      image_url: string | null;
      /**
       * Unique Scans N
       * @description number of unique scans of the product on Open Food Facts.
       * @default 0
       */
      unique_scans_n?: number;
      /**
       * Price Count
       * @description number of prices for this product.
       * @default 0
       */
      price_count?: number;
      /**
       * Created
       * Format: date-time
       * @description datetime of the creation.
       */
      created: string;
      /**
       * Updated
       * @description datetime of the last update.
       */
      updated: string | null;
    };
    /** ProofFull */
    ProofFull: {
      /** Id */
      id: number;
      /** File Path */
      file_path: string | null;
      /** Mimetype */
      mimetype: string;
      type?: components["schemas"]["ProofTypeEnum"] | null;
      /** Owner */
      owner: string;
      /**
       * Is Public
       * @description if true, the proof is public and is included in the API response. Set false only if the proof contains personal information.
       * @default true
       */
      is_public?: boolean;
      /**
       * Created
       * Format: date-time
       */
      created: string;
    };
    /**
     * ProofTypeEnum
     * @enum {string}
     */
    ProofTypeEnum: "PRICE_TAG" | "RECEIPT" | "GDPR_REQUEST";
    /** SessionBase */
    SessionBase: {
      /** User Id */
      user_id: string;
      /**
       * Created
       * Format: date-time
       */
      created: string;
      /** Last Used */
      last_used: string | null;
    };
    /** UserBase */
    UserBase: {
      /** User Id */
      user_id: string;
      /**
       * Price Count
       * @default 0
       */
      price_count?: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Status Endpoint */
  status_endpoint_api_v1_status_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Authentication
   * @description Authentication: provide username/password and get a bearer token in return.
   *
   * - **username**: Open Food Facts user_id (not email)
   * - **password**: user password (clear text, but HTTPS encrypted)
   *
   * A **token** is returned. If the **set_cookie** parameter is set to 1,
   * the token is also set as a cookie named "session" in the response.
   *
   * To authenticate, you can either:
   * - use the **Authorization** header with the **Bearer** scheme,
   *   e.g.: "Authorization: bearer token"
   * - use the **session** cookie, e.g.: "Cookie: session=token"
   */
  authentication_api_v1_auth_post: {
    parameters: {
      query?: {
        /** @description if set to 1, the token is also set as a cookie named 'session' in the response. This parameter must be passed as a query parameter, e.g.: /auth?set_cookie=1 */
        set_cookie?: boolean;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_authentication_api_v1_auth_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get User Session
   * @description Return information about the current user session.
   */
  get_user_session_api_v1_session_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionBase"];
        };
      };
    };
  };
  /** Get Users */
  get_users_api_v1_users_get: {
    parameters: {
      query?: {
        price_count?: number | null;
        price_count__gte?: number | null;
        price_count__lte?: number | null;
        order_by?: string | null;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_UserBase_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Price */
  get_price_api_v1_prices_get: {
    parameters: {
      query?: {
        product_code?: string | null;
        product_id?: number | null;
        product_id__isnull?: boolean | null;
        category_tag?: string | null;
        labels_tags__like?: string | null;
        origins_tags__like?: string | null;
        location_osm_id?: number | null;
        location_osm_type?: components["schemas"]["LocationOSMEnum"] | null;
        location_id?: number | null;
        price?: number | null;
        price_is_discounted?: boolean | null;
        price__gt?: number | null;
        price__gte?: number | null;
        price__lt?: number | null;
        price__lte?: number | null;
        currency?: string | null;
        date?: string | null;
        date__gt?: string | null;
        date__gte?: string | null;
        date__lt?: string | null;
        date__lte?: string | null;
        owner?: string | null;
        created__gte?: string | null;
        created__lte?: string | null;
        order_by?: string | null;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_PriceFullWithRelations_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Price
   * @description Create a new price.
   *
   * This endpoint requires authentication.
   */
  create_price_api_v1_prices_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PriceCreateWithValidation"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PriceFull"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload Proof
   * @description Upload a proof file.
   *
   * The POST request must be a multipart/form-data request with a file field
   * named "file".
   *
   * This endpoint requires authentication.
   */
  upload_proof_api_v1_proofs_upload_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_proof_api_v1_proofs_upload_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ProofFull"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get User Proofs
   * @description Get all the proofs uploaded by the current user.
   *
   * This endpoint requires authentication.
   */
  get_user_proofs_api_v1_proofs_get: {
    parameters: {
      query?: {
        owner?: string | null;
        type?: components["schemas"]["ProofTypeEnum"] | null;
        order_by?: string | null;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ProofFull_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Products */
  get_products_api_v1_products_get: {
    parameters: {
      query?: {
        code?: string | null;
        source?: components["schemas"]["Flavor"] | null;
        product_name__like?: string | null;
        brands__like?: string | null;
        unique_scans_n__gte?: number | null;
        price_count?: number | null;
        price_count__gte?: number | null;
        price_count__lte?: number | null;
        order_by?: string | null;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ProductFull_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Product By Code */
  get_product_by_code_api_v1_products_code__product_code__get: {
    parameters: {
      path: {
        product_code: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProductFull"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Product By Id */
  get_product_by_id_api_v1_products__product_id__get: {
    parameters: {
      path: {
        product_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProductFull"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Locations */
  get_locations_api_v1_locations_get: {
    parameters: {
      query?: {
        osm_name__like?: string | null;
        osm_address_country__like?: string | null;
        price_count?: number | null;
        price_count__gte?: number | null;
        price_count__lte?: number | null;
        order_by?: string | null;
        /** @description Page number */
        page?: number;
        /** @description Page size */
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_LocationFull_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Location By Osm */
  get_location_by_osm_api_v1_locations_osm__location_osm_type___location_osm_id__get: {
    parameters: {
      path: {
        location_osm_type: string;
        location_osm_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LocationFull"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Location By Id */
  get_location_by_id_api_v1_locations__location_id__get: {
    parameters: {
      path: {
        location_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LocationFull"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
